/*

Programado por: Alexandre Murari Martinez
TECNNIC Eletrônica Industrial
Rua Gal. Lauro Sodré, 150 - Comerciário - Criciúma - SC
desenvolvimento@tecnnic.com.br - www.tecnnic.com.br
Fone: (48) 431-9713 - Fax: (48) 431-9720

*/
#include <16F877A.h> // Arquivo de include do microcontrolador usado...
#device adc=10
#use delay(clock=4000000) // Estipula valor de clock para as rotinas de delay...
#fuses XT,NOWDT,NOPUT,NOPROTECT,NOBROWNOUT,NOLVP,NOCPD,NOWRT   /* Acerta os bits de configuração:
                                                                Oscilador do tipo XT; watchdog timer desligado; reset de
                                                                power-up desligado; proteção de código desativada; reset
                                                                de brown-out desligado; programação por nível baixo de
                                                                tensão desativada, pino B3 liberado para I/O; proteção de
                                                                leitura da E2Prom interna desativada; escrita na memória
                                                                flash desativada...
                                                               */

void pulso() // Função usada para dar o pulso de "Enable" do display LCD...
{
   output_high(PIN_C7); // Seta pino de "Enable"...
   delay_cycles(10); // Espera 10 ciclos de máquina...
   output_low(PIN_C7); // Reseta pino de "Enable"...
}

void limpa() // Função usada para limpar display LCD e reiniciar cursor na coluna 0 e linha 0...
{
   output_low(PIN_C4); // Seleciona display para comandos (resetando-se o pino RS do LCD)...
   output_d(0x00);
   pulso();
   output_d(0x10);
   pulso();
   delay_ms(2); // Envia o comando 0x01 para o LCD e espera 2 ms (necessário para resposta do display)...
}

void posicao(int x,y) // Função usada para posicionar cursor no LCD...
{
   int z,w; // Variáveis temporárias locais...
   z=0;
   output_low(PIN_C4); // Seleciona display para comandos...
   switch (y) // Tabela tipo case para determinar em qual linha deverá ser posicionado o cursor...
   {
      case 0: z=0x80; // Posiciona na linha 0...
      break;
      case 1: z=0xC0; // Posiciona na linha 1...
      break;
   }
   switch (x) // Tabela tipo case para determinar em qual coluna deverá ser posicionado o cursor...
   {
      case 0: w=0x00; // Posiciona na coluna 0...
      break;
      case 1: w=0x10; // Posiciona na coluna 1...
      break;
      case 2: w=0x20; // Posiciona na coluna 2...
      break;
      case 3: w=0x30; // Posiciona na coluna 3...
      break;
      case 4: w=0x40; // Posiciona na coluna 4...
      break;
      case 5: w=0x50; // Posiciona na coluna 5...
      break;
      case 6: w=0x60; // Posiciona na coluna 6...
      break;
      case 7: w=0x70; // Posiciona na coluna 7...
      break;
      case 8: w=0x80; // Posiciona na coluna 8...
      break;
      case 9: w=0x90; // Posiciona na coluna 9...
      break;
      case 10: w=0xA0; // Posiciona na coluna 10...
      break;
      case 11: w=0xB0; // Posiciona na coluna 11...
      break;
      case 12: w=0xC0; // Posiciona na coluna 12...
      break;
      case 13: w=0xD0; // Posiciona na coluna 13...
      break;
      case 14: w=0xE0; // Posiciona na coluna 14...
      break;
      case 15: w=0xF0; // Posiciona na coluna 15...
      break;
   }
   output_d(z);
   pulso();
   output_d(w);
   pulso();
   delay_us(40); // Envia o comando para o LCD e espera 40 us para resposta do display...
}

void escreve(char x)   // Função usada para escreve um caracter no display...
{
   char y; // Variável temporária local...
   y=x<<4; // Separa o caracter em dois nibbles...
   output_high(PIN_C4); // Seleciona display para dados...
   output_d(x);
   pulso();
   output_d(y);
   pulso();
   delay_us(40); // Envia o dado para o LCD e espera 40 us para resposta do display...
}

void lcd_ini() // Função usada para inicialização do display...
{
   delay_ms(15); // Espera 15 ms para energização do display e do seu controlador...
   output_low(PIN_C7); // Reseta pino de "Enable" do LCD...
   output_low(PIN_C4); // Seleciona display para comandos...
   output_d(0x30); // Envia comando 0x30 para o LCD...
   pulso();
   delay_ms(4); // Aguarda 4 ms para garantir o término da operação...
   pulso(); // Reenvia comando 0x30 para o LCD...
   delay_us(100); // Aguarda 100 us...
   pulso(); // Reenvia comando 0x30 para o LCD...
   delay_us(40); // Aguarda 40 us...
   output_d(0x20); // Estabele comunicação em 4 vias...
   pulso();
   delay_us(40); // Espera 40 us...
   output_d(0x20); // Como a comunicação é de 4 vias envia-se o nibble mais significativo primeiro...
   pulso();
   output_d(0x80); // Estabelece condições de utilização: display de 2 linhas e matriz 7X5...
   pulso();
   delay_us(40); // Aguarda 40 us...
   output_d(0x00);
   pulso();
   output_d(0x10); // Limpa o display (iqual função "limpa()")...
   pulso();
   delay_ms(2); // Aguarda 2 ms...
   output_d(0x00);
   pulso();
   output_d(0xC0); // Comando para ligar display sem cursor...
   pulso();
   delay_us(40); // Aguarda 40 us...
   output_d(0x00);
   pulso();
   output_d(0x60); // Estabelece modo de operação: Deslocamento automático do cursor para direita...
   pulso();
   delay_us(40); // Aguarda 40 us...
}

void menu()
{
}
void login()
{
}
void out()
{
}

void cadastro()
{
}

Void zerar()
{
int8 menu,irpara,parado,filtro;
int1 click;
click=0;
menu=0;
irpara=0;
filtro=15;
parado=0;
}

void main()
{
   int valor_cad; // Declaração de variável inteira usada para armazenar valor da conversão...
   float tensao; // Declaração de variável ponto flutuante para armazenar valor real da tensão...
   char buffer[5]; // Declaração de matriz de caracteres (string) para armazenar valor real                // da tensão de forma que possa ser escrito no display LCD...
   int8 menu,irpara,filtro=15,parado;
   int1 click;

   
   #locate irpara=0x20
   #locate menu=0x21
   #locate filtro=0x22
    #locate parado=0x23
   
   setup_adc_ports(RA0_RA1_RA3_ANALOG); // Configura conversor A/D para usar Pinos A0,A1,A3 com referência ao Vcc...
   setup_adc(ADC_CLOCK_INTERNAL); // Configura conversor A/D para usar clock interno...
   setup_psp(PSP_DISABLED); // Desabilita porta paralela...
   setup_spi(FALSE); // Desliga comunicação serial SPI...
   setup_counters(RTCC_INTERNAL,RTCC_DIV_2); // Configura timer 0 com clock interno e prescaler 1:2...
   setup_timer_1(T1_DISABLED); // Desliga timer 1...
  // setup_timer_2(T2_DISABLED,0,1); // Desliga timer 2...
   lcd_ini(); // Inicializa dislpay LCD...
   set_adc_channel(1); // Seleciona canal 1 do conversor A/D (Pino A1)...
   delay_us(20); // Aguarda 20 us para estabilização do conversor A/D...
   limpa();

   port_b_pullups(true); // Habilita resistores de pull-up dp Port B...
   set_tris_b(0b01111111); // Configura Port B... 
   set_tris_c(0b01101100);
   output_b(0x00);
   
   zerar();

   while(true)
 {
   if ((!input(pin_b6))&&(input(pin_b5)))
   {
   filtro--;
   if ((!input(pin_b6))&&(input(pin_b5))&&(filtro>240)&&(click=0))
   {
   click=1;
   filtro=15;
   irpara++;
   }
   }
      
   if ((input(pin_b6))&&(input(pin_b5))&&(input(pin_b4))&&(input(pin_b3)))
   {
      parado++;
      if ((input(pin_b6))&&(input(pin_b5))&&(input(pin_b4))&&(input(pin_b3))&&((parado)>(15)))
      {
      parado=0;
      click=0;
      }
   }
 } 
}
