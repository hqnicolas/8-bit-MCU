CCS PCM C Compiler, Version 3.241, 26598               

               Filename: Untitled.lst

               ROM used: 769 words (38%)
                         Largest free fragment is 1279
               RAM used: 38 (22%) at main() level
                         42 (24%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   1EA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   03D
0022:  BTFSS  0B.5
0023:  GOTO   026
0024:  BTFSC  0B.2
0025:  GOTO   039
0026:  MOVF   22,W
0027:  MOVWF  04
0028:  MOVF   23,W
0029:  MOVWF  77
002A:  MOVF   24,W
002B:  MOVWF  78
002C:  MOVF   25,W
002D:  MOVWF  79
002E:  MOVF   26,W
002F:  MOVWF  7A
0030:  MOVF   27,W
0031:  MOVWF  7B
0032:  MOVF   28,W
0033:  MOVWF  0A
0034:  SWAPF  21,W
0035:  MOVWF  03
0036:  SWAPF  7F,F
0037:  SWAPF  7F,W
0038:  RETFIE
.................... /*OBJETIVO 
.................... Gerador de PWM do Boost para controle de Freio. 
.................... *****************************************************/ 
....................  
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES INTRC_IO              	//Internal RC Osc, no CLKOUT 
.................... #FUSES NOPUT                   	//Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOMCLR                 	//Master Clear pin used for I/O 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #use delay(clock=4000000,RESTART_WDT) 
....................  
.................... #priority timer1,rtcc,rb 
.................... /***************************************** 
.................... /*Variaveis Globais 
.................... /****************************************/ 
....................  
.................... int				leds,dsp1,dsp2,dsp3,dsp4; //Display 
.................... signed  int		soCont=-1;				  //contador de uso geral 
*
01F2:  MOVLW  FF
01F3:  MOVWF  2E
.................... boolean			DP1,DP2,DP3,DP4;	      //indica se o digital point esta ligado ON = 0 OFF = 1 	 
.................... boolean			atualizar_display; 
.................... int				cont; 					  //contador de uso geral	 
.................... int				inFlag; 
.................... int				fCont[4]; //contadores do fltro 
.................... int 			status = 0; 
01F4:  CLRF   36
.................... int16		pwmcont = 1; 
01F5:  MOVLW  01
01F6:  MOVWF  37
01F7:  CLRF   38
.................... int16		temp;  
.................... /***************************************** 
.................... /*Constantes, Bits e Bytes  
.................... /****************************************/ 
.................... #use	fast_io(a) 
.................... #use	fast_io(b) 
.................... #byte	tris_a = 0x85 
.................... #byte	tris_b = 0x86 
....................  
.................... //IO 
.................... #define		outEn		pin_a7 //controle do 4093 
.................... #define		clk			pin_b0 //controle do 4093 
.................... #define		data		pin_a4 //controle do 4093	 
.................... #define		bus0		pin_a0 
.................... #define		bus1		pin_a1 
.................... #define		bus2		pin_a2 
.................... #define		bus3		pin_a3 
.................... #define		bus4		pin_b4 
.................... #define		bus5		pin_b5 
.................... #define		bus6		pin_a6 
.................... #define		bus7		pin_b7	 
.................... #define		fre_pin		pin_b3  //pino da frequência 
....................  
....................  
.................... #define		out_a		0b10110000 
.................... #define		out_b		0b01001111 
....................  
.................... #define 	um			0b11111001 
.................... #define 	dois		0b10100100 
.................... #define 	tres		0b10110000 
.................... #define 	quatro		0b10011001 
.................... #define 	cinco		0b10010010 
.................... #define 	seis		0b10000010 
.................... #define 	sete		0b11111000 
.................... #define 	oito		0b10000000 
.................... #define		nove		0b10010000 
.................... #define		zero		0b11000000 
.................... #define		off			0b11111111 
....................  
.................... // referencia ao registrador leds 
.................... #define		led6		0b11111101	 
.................... #define		led2		0b11110111 
.................... #define		led3		0b11101111 
.................... #define		led4		0b11011111 
.................... #define		L1_L2		0b11111110	 
....................  
.................... //Posição física da tecla em relação ao PORT 
.................... #define		sw1			1 
.................... #define		sw3			3 
.................... #define		sw4			4 
.................... #define		sw5			5 
....................  
.................... //Posição lógica da tecla no Flag "inFlag" 
.................... #define		sw1b		0 
.................... #define		sw3b		1 
.................... #define		sw4b		2 
.................... #define		sw5b		3 
....................  
.................... /***************************************** 
.................... /*Protótipos 
.................... /****************************************/ 
.................... void output_bus(int8 bus,boolean DPst ); 
.................... int	filtro (int flag); 
.................... int	retorna_display(int16 numero); 
.................... void	at_display(); 
....................  
.................... /***************************************** 
.................... /*Interupção Timer0  
.................... /*Utilizada como timer do "Sistema Operacional" 
.................... /****************************************/ 
.................... #int_RTCC 
.................... RTCC_isr()  
.................... { 
.................... 	atualizar_display = true; 
*
0039:  BSF    2F.4
....................  
.................... }//int_RTCC 
....................  
003A:  BCF    0B.2
003B:  BCF    0A.3
003C:  GOTO   026
.................... #int_TIMER1 
.................... TIMER1_isr()  
.................... { 
.................... 	#asm //debug 
.................... 		nop 
003D:  NOP
.................... 	#endasm 
.................... 		set_timer1(temp); 
003E:  MOVF   3A,W
003F:  MOVWF  0F
0040:  MOVF   39,W
0041:  MOVWF  0E
....................  
.................... } 
.................... /***************************************** 
.................... /*Função Main 
.................... /****************************************/ 
0042:  BCF    0C.0
0043:  BCF    0A.3
0044:  GOTO   026
.................... void main(){ 
*
01EA:  CLRF   04
01EB:  MOVLW  1F
01EC:  ANDWF  03,F
01ED:  BSF    03.5
01EE:  BSF    0E.3
01EF:  MOVLW  07
01F0:  BCF    03.5
01F1:  MOVWF  1F
....................    
....................   int16		retorno,retorno2;  		 
.................... //configurações 
....................    
.................... //TIMER 0	 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8); 
*
01F8:  BSF    03.5
01F9:  MOVF   01,W
01FA:  ANDLW  C0
01FB:  IORLW  02
01FC:  MOVWF  01
....................    enable_interrupts(INT_RTCC); 
01FD:  BCF    03.5
01FE:  BSF    0B.5
....................  
.................... //TIMER 1 
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);	 
01FF:  MOVLW  85
0200:  MOVWF  10
....................    enable_interrupts(INT_TIMER1); 
0201:  BSF    03.5
0202:  BSF    0C.0
....................  
.................... //TIMER 2   
....................  setup_timer_2(T2_DIV_BY_4, 10, 1); 
0203:  MOVLW  00
0204:  MOVWF  78
0205:  IORLW  05
0206:  BCF    03.5
0207:  MOVWF  12
0208:  MOVLW  0A
0209:  BSF    03.5
020A:  MOVWF  12
....................  setup_ccp1 (ccp_pwm); 
020B:  BCF    03.5
020C:  BCF    06.3
020D:  MOVLW  0C
020E:  MOVWF  17
....................  set_pwm1_duty (0);  
020F:  CLRF   15
....................  
.................... //COMPARADOR 
....................    setup_comparator(NC_NC_NC_NC); 
0210:  MOVLW  07
0211:  MOVWF  1F
0212:  BSF    03.5
0213:  MOVF   05,W
0214:  CLRWDT
0215:  MOVLW  02
0216:  MOVWF  77
0217:  DECFSZ 77,F
0218:  GOTO   217
0219:  NOP
021A:  NOP
021B:  BCF    03.5
021C:  MOVF   1F,W
021D:  BCF    0C.6
....................    setup_vref(False); 
021E:  BSF    03.5
021F:  CLRF   1F
....................  
.................... //OSCILADOR 
....................    setup_oscillator(OSC_4MHZ); 
0220:  BSF    0E.3
.................... //MODULO PWM 
....................   setup_ccp1(CCP_PWM);    
0221:  BCF    03.5
0222:  BCF    06.3
0223:  MOVLW  0C
0224:  MOVWF  17
....................   
.................... //TRISTATE REG 
.................... 	set_tris_b(0B011110111); 
0225:  MOVLW  F7
0226:  TRIS   6
....................  
.................... enable_interrupts(GLOBAL);  
0227:  MOVLW  C0
0228:  IORWF  0B,F
....................  
.................... // inicialização de variaveis 
.................... 	status = 0; 
0229:  CLRF   36
.................... 	fCont[0] = 0; 
022A:  CLRF   32
.................... 	fCont[1] = 0; 
022B:  CLRF   33
.................... 	fCont[2] = 0; 
022C:  CLRF   34
.................... 	fCont[3] = 0; 
022D:  CLRF   35
....................  	atualizar_display = false;  
022E:  BCF    2F.4
.................... 	leds = 0xff;//led6&&led2 ; 
022F:  MOVLW  FF
0230:  MOVWF  29
....................     dsp1 = off; 
0231:  MOVWF  2A
....................     dsp2 = off; 
0232:  MOVWF  2B
....................     dsp3 = off; 
0233:  MOVWF  2C
....................     dsp4 = off; 
0234:  MOVWF  2D
.................... 	DP1 = true; 
0235:  BSF    2F.0
.................... 	DP2 = true; 
0236:  BSF    2F.1
....................     DP3 = true; 
0237:  BSF    2F.2
.................... 	DP4 = true; 
0238:  BSF    2F.3
....................  
.................... // loop principal 
.................... 	while(true){ 
.................... 		set_pwm1_duty (pwmcont/4); 
0239:  RRF    38,W
023A:  MOVWF  40
023B:  RRF    37,W
023C:  MOVWF  3F
023D:  RRF    40,F
023E:  RRF    3F,F
023F:  MOVLW  3F
0240:  ANDWF  40,F
0241:  RRF    40,F
0242:  RRF    3F,F
0243:  RRF    40,F
0244:  RRF    3F,F
0245:  RRF    40,F
0246:  MOVF   3F,W
0247:  MOVWF  15
0248:  RRF    40,F
0249:  RRF    40,W
024A:  ANDLW  30
024B:  MOVWF  77
024C:  MOVF   17,W
024D:  ANDLW  CF
024E:  IORWF  77,W
024F:  MOVWF  17
.................... 	//exibição no display	 
.................... 		retorno = pwmcont/1000 ; 
0250:  MOVF   38,W
0251:  MOVWF  40
0252:  MOVF   37,W
0253:  MOVWF  3F
0254:  MOVLW  03
0255:  MOVWF  42
0256:  MOVLW  E8
0257:  MOVWF  41
0258:  CALL   045
0259:  MOVF   79,W
025A:  MOVWF  3C
025B:  MOVF   78,W
025C:  MOVWF  3B
.................... 		retorno2 = pwmcont%1000;  
025D:  MOVF   38,W
025E:  MOVWF  40
025F:  MOVF   37,W
0260:  MOVWF  3F
0261:  MOVLW  03
0262:  MOVWF  42
0263:  MOVLW  E8
0264:  MOVWF  41
0265:  CALL   045
0266:  MOVF   77,W
0267:  MOVWF  3D
0268:  MOVF   7A,W
0269:  MOVWF  3E
.................... 		retorno = retorno2/100;  
026A:  MOVF   3E,W
026B:  MOVWF  40
026C:  MOVF   3D,W
026D:  MOVWF  3F
026E:  CLRF   42
026F:  MOVLW  64
0270:  MOVWF  41
0271:  CALL   045
0272:  MOVF   79,W
0273:  MOVWF  3C
0274:  MOVF   78,W
0275:  MOVWF  3B
.................... 		dsp1 = retorna_display(retorno); 
0276:  MOVF   3C,W
0277:  MOVWF  40
0278:  MOVF   3B,W
0279:  MOVWF  3F
027A:  CALL   06B
027B:  MOVF   78,W
027C:  MOVWF  2A
.................... 		retorno2 = retorno2%100; 
027D:  MOVF   3E,W
027E:  MOVWF  40
027F:  MOVF   3D,W
0280:  MOVWF  3F
0281:  CLRF   42
0282:  MOVLW  64
0283:  MOVWF  41
0284:  CALL   045
0285:  MOVF   77,W
0286:  MOVWF  3D
0287:  MOVF   7A,W
0288:  MOVWF  3E
.................... 		retorno =  retorno2/10;  
0289:  MOVF   3E,W
028A:  MOVWF  40
028B:  MOVF   3D,W
028C:  MOVWF  3F
028D:  CLRF   42
028E:  MOVLW  0A
028F:  MOVWF  41
0290:  CALL   045
0291:  MOVF   79,W
0292:  MOVWF  3C
0293:  MOVF   78,W
0294:  MOVWF  3B
.................... 		dsp2 = (retorna_display(retorno)-128); 
0295:  MOVF   3C,W
0296:  MOVWF  40
0297:  MOVF   3B,W
0298:  MOVWF  3F
0299:  CALL   06B
029A:  MOVLW  80
029B:  SUBWF  78,W
029C:  MOVWF  2B
.................... 		retorno =  retorno2%10;  
029D:  MOVF   3E,W
029E:  MOVWF  40
029F:  MOVF   3D,W
02A0:  MOVWF  3F
02A1:  CLRF   42
02A2:  MOVLW  0A
02A3:  MOVWF  41
02A4:  CALL   045
02A5:  MOVF   77,W
02A6:  MOVWF  3B
02A7:  MOVF   7A,W
02A8:  MOVWF  3C
.................... 		dsp3 = retorna_display(retorno); 
02A9:  MOVF   3C,W
02AA:  MOVWF  40
02AB:  MOVF   3B,W
02AC:  MOVWF  3F
02AD:  CALL   06B
02AE:  MOVF   78,W
02AF:  MOVWF  2C
.................... 		bit_clear (retorno,7); 
02B0:  BCF    3B.7
.................... 		dsp4 = 0b00101101; 
02B1:  MOVLW  2D
02B2:  MOVWF  2D
.................... 	//verifica teclas 
.................... 	if(bit_test(inFlag,sw1b)) 
02B3:  BTFSS  31.0
02B4:  GOTO   2C4
.................... 		{ 
.................... 			bit_clear(inFlag,sw1b); 
02B5:  BCF    31.0
.................... 			if(pwmcont<999) 
02B6:  MOVF   38,W
02B7:  SUBLW  03
02B8:  BTFSS  03.0
02B9:  GOTO   2C3
02BA:  BTFSS  03.2
02BB:  GOTO   2C0
02BC:  MOVF   37,W
02BD:  SUBLW  E6
02BE:  BTFSS  03.0
02BF:  GOTO   2C3
.................... 				pwmcont++; 
02C0:  INCF   37,F
02C1:  BTFSC  03.2
02C2:  INCF   38,F
.................... 		} 
.................... 	else 
02C3:  GOTO   2D1
.................... 		if(bit_test(inFlag,sw3b)) 
02C4:  BTFSS  31.1
02C5:  GOTO   2D1
.................... 			{	bit_clear(inFlag,sw3b); 
02C6:  BCF    31.1
.................... 				if(pwmcont>0) 
02C7:  MOVF   37,F
02C8:  BTFSS  03.2
02C9:  GOTO   2CD
02CA:  MOVF   38,F
02CB:  BTFSC  03.2
02CC:  GOTO   2D1
.................... 				pwmcont--;					 
02CD:  MOVF   37,W
02CE:  BTFSC  03.2
02CF:  DECF   38,F
02D0:  DECF   37,F
.................... 			} 
....................  
.................... 	if(bit_test(inFlag,sw4b)) 
02D1:  BTFSS  31.2
02D2:  GOTO   2E8
.................... 	{ 
.................... 		bit_clear(inFlag,sw4b); 
02D3:  BCF    31.2
.................... 		if(pwmcont<(990)) 
02D4:  MOVF   38,W
02D5:  SUBLW  03
02D6:  BTFSS  03.0
02D7:  GOTO   2E3
02D8:  BTFSS  03.2
02D9:  GOTO   2DE
02DA:  MOVF   37,W
02DB:  SUBLW  DD
02DC:  BTFSS  03.0
02DD:  GOTO   2E3
.................... 			pwmcont =	pwmcont	+ 10; 
02DE:  MOVLW  0A
02DF:  ADDWF  37,F
02E0:  BTFSC  03.0
02E1:  INCF   38,F
.................... 		else	 
02E2:  GOTO   2E7
.................... 			pwmcont = 999;	 
02E3:  MOVLW  03
02E4:  MOVWF  38
02E5:  MOVLW  E7
02E6:  MOVWF  37
.................... 	} 
.................... 	else 
02E7:  GOTO   2FB
.................... 		if(bit_test(inFlag,sw5b)) 
02E8:  BTFSS  31.3
02E9:  GOTO   2FB
.................... 			{	bit_clear(inFlag,sw5b); 
02EA:  BCF    31.3
.................... 				if(pwmcont>10) 
02EB:  MOVF   38,F
02EC:  BTFSS  03.2
02ED:  GOTO   2F2
02EE:  MOVF   37,W
02EF:  SUBLW  0A
02F0:  BTFSC  03.0
02F1:  GOTO   2F9
.................... 					pwmcont =	pwmcont	- 10; 
02F2:  MOVLW  0A
02F3:  SUBWF  37,F
02F4:  MOVLW  00
02F5:  BTFSS  03.0
02F6:  MOVLW  01
02F7:  SUBWF  38,F
.................... 				else 
02F8:  GOTO   2FB
.................... 					pwmcont = 0;	 
02F9:  CLRF   38
02FA:  CLRF   37
.................... 			} 
.................... 	//debug 
.................... 	// verifica atualização do Display  
.................... 	if (atualizar_display){ 
02FB:  BTFSS  2F.4
02FC:  GOTO   2FF
.................... 		at_display(); 
02FD:  GOTO   100
.................... 		atualizar_display = false; 
02FE:  BCF    2F.4
.................... 	}	 
.................... 	}//while 
02FF:  GOTO   239
.................... } 
.................... /***************************************** 
.................... /*Função converte para display 7 seguimentos 
.................... /*  
.................... /****************************************/ 
.................... int	retorna_display(int16 numero){ 
....................  
0300:  SLEEP
....................  
.................... switch (numero){ 
*
006B:  MOVF   3F,W
006C:  MOVWF  77
006D:  MOVF   40,W
006E:  MOVWF  7A
006F:  MOVF   7A,W
0070:  BTFSS  03.2
0071:  GOTO   075
0072:  MOVF   77,F
0073:  BTFSC  03.2
0074:  GOTO   0B5
0075:  MOVF   7A,W
0076:  BTFSS  03.2
0077:  GOTO   07C
0078:  MOVLW  01
0079:  SUBWF  77,W
007A:  BTFSC  03.2
007B:  GOTO   0B8
007C:  MOVF   7A,W
007D:  BTFSS  03.2
007E:  GOTO   083
007F:  MOVLW  02
0080:  SUBWF  77,W
0081:  BTFSC  03.2
0082:  GOTO   0BB
0083:  MOVF   7A,W
0084:  BTFSS  03.2
0085:  GOTO   08A
0086:  MOVLW  03
0087:  SUBWF  77,W
0088:  BTFSC  03.2
0089:  GOTO   0BE
008A:  MOVF   7A,W
008B:  BTFSS  03.2
008C:  GOTO   091
008D:  MOVLW  04
008E:  SUBWF  77,W
008F:  BTFSC  03.2
0090:  GOTO   0C1
0091:  MOVF   7A,W
0092:  BTFSS  03.2
0093:  GOTO   098
0094:  MOVLW  05
0095:  SUBWF  77,W
0096:  BTFSC  03.2
0097:  GOTO   0C4
0098:  MOVF   7A,W
0099:  BTFSS  03.2
009A:  GOTO   09F
009B:  MOVLW  06
009C:  SUBWF  77,W
009D:  BTFSC  03.2
009E:  GOTO   0C7
009F:  MOVF   7A,W
00A0:  BTFSS  03.2
00A1:  GOTO   0A6
00A2:  MOVLW  07
00A3:  SUBWF  77,W
00A4:  BTFSC  03.2
00A5:  GOTO   0CA
00A6:  MOVF   7A,W
00A7:  BTFSS  03.2
00A8:  GOTO   0AD
00A9:  MOVLW  08
00AA:  SUBWF  77,W
00AB:  BTFSC  03.2
00AC:  GOTO   0CD
00AD:  MOVF   7A,W
00AE:  BTFSS  03.2
00AF:  GOTO   0B4
00B0:  MOVLW  09
00B1:  SUBWF  77,W
00B2:  BTFSC  03.2
00B3:  GOTO   0D0
00B4:  GOTO   0D3
.................... 	case 	(0):return 	(zero); 
00B5:  MOVLW  C0
00B6:  MOVWF  78
00B7:  GOTO   0D6
.................... 	case	(1):return	(um);		  
00B8:  MOVLW  F9
00B9:  MOVWF  78
00BA:  GOTO   0D6
.................... 	case	(2):return	(dois); 
00BB:  MOVLW  A4
00BC:  MOVWF  78
00BD:  GOTO   0D6
.................... 	case	(3):return	(tres); 
00BE:  MOVLW  B0
00BF:  MOVWF  78
00C0:  GOTO   0D6
.................... 	case	(4):return	(quatro); 
00C1:  MOVLW  99
00C2:  MOVWF  78
00C3:  GOTO   0D6
.................... 	case	(5):return	(cinco); 
00C4:  MOVLW  92
00C5:  MOVWF  78
00C6:  GOTO   0D6
.................... 	case	(6):return	(seis); 
00C7:  MOVLW  82
00C8:  MOVWF  78
00C9:  GOTO   0D6
.................... 	case	(7):return	(sete); 
00CA:  MOVLW  F8
00CB:  MOVWF  78
00CC:  GOTO   0D6
.................... 	case	(8):return	(oito); 
00CD:  MOVLW  80
00CE:  MOVWF  78
00CF:  GOTO   0D6
.................... 	case	(9):return	(nove); 
00D0:  MOVLW  90
00D1:  MOVWF  78
00D2:  GOTO   0D6
.................... 	default:	return	(off); 
00D3:  MOVLW  FF
00D4:  MOVWF  78
00D5:  GOTO   0D6
....................  
....................  
.................... } 
.................... } 
00D6:  RETLW  00
.................... /***************************************** 
.................... /*Função Atualiza display 
.................... /* atualiza o estado do diplsy e le teclas 
.................... /****************************************/ 
....................  
.................... void	at_display(){ 
....................  
.................... int		temp1,temp2; //variavels locais  
....................  
.................... soCont++; 
*
0100:  INCF   2E,F
.................... output_bit(outEn, 0);	 
0101:  BCF    05.7
.................... switch (soCont){ 
0102:  MOVF   2E,W
0103:  BTFSC  03.2
0104:  GOTO   115
0105:  XORLW  01
0106:  BTFSC  03.2
0107:  GOTO   136
0108:  XORLW  03
0109:  BTFSC  03.2
010A:  GOTO   143
010B:  XORLW  01
010C:  BTFSC  03.2
010D:  GOTO   150
010E:  XORLW  07
010F:  BTFSC  03.2
0110:  GOTO   15D
0111:  XORLW  01
0112:  BTFSC  03.2
0113:  GOTO   16A
0114:  GOTO   1E6
.................... 	case 0:	set_tris_a(tris_a&out_a); 
0115:  BSF    03.5
0116:  MOVF   05,W
0117:  ANDLW  B0
0118:  BCF    03.5
0119:  MOVWF  41
011A:  TRIS   5
.................... 		    set_tris_b(tris_b&out_b); 
011B:  BSF    03.5
011C:  MOVF   06,W
011D:  ANDLW  4F
011E:  BCF    03.5
011F:  MOVWF  41
0120:  TRIS   6
.................... 			 
.................... 			output_bus(leds,1);//move leds para saida 
0121:  MOVF   29,W
0122:  MOVWF  42
0123:  MOVLW  01
0124:  MOVWF  43
0125:  CALL   0D7
.................... 			output_bit(data, 1); 
0126:  BSF    05.4
.................... 			for(cont=0;cont<10;cont++) //zera shift reg  
0127:  CLRF   30
0128:  MOVF   30,W
0129:  SUBLW  09
012A:  BTFSS  03.0
012B:  GOTO   130
.................... 			{	output_bit(clk,0); 
012C:  BCF    06.0
.................... 				output_bit(clk,1); 
012D:  BSF    06.0
.................... 			} 
012E:  INCF   30,F
012F:  GOTO   128
.................... 			output_bit(data, 0); 
0130:  BCF    05.4
.................... 			output_bit(clk,0); 
0131:  BCF    06.0
.................... 			output_bit(clk,1); 
0132:  BSF    06.0
.................... 			output_bit(data, 1); 
0133:  BSF    05.4
.................... 			output_bit(outEn, 1); 
0134:  BSF    05.7
.................... 			break; 
0135:  GOTO   1E7
.................... 	 
.................... 	case 1:	output_bit(clk,0); 
0136:  BCF    06.0
.................... 			output_bit(clk,1);		 
0137:  BSF    06.0
.................... 			output_bus(dsp1,DP1); 
0138:  MOVLW  00
0139:  BTFSC  2F.0
013A:  MOVLW  01
013B:  MOVWF  41
013C:  MOVF   2A,W
013D:  MOVWF  42
013E:  MOVF   41,W
013F:  MOVWF  43
0140:  CALL   0D7
.................... 			output_bit(outEn, 1); 
0141:  BSF    05.7
.................... 			break; 
0142:  GOTO   1E7
....................  
.................... 	case 2:	output_bit(clk,0); 
0143:  BCF    06.0
.................... 			output_bit(clk,1);	 
0144:  BSF    06.0
.................... 			output_bus(dsp2,DP2); 
0145:  MOVLW  00
0146:  BTFSC  2F.1
0147:  MOVLW  01
0148:  MOVWF  41
0149:  MOVF   2B,W
014A:  MOVWF  42
014B:  MOVF   41,W
014C:  MOVWF  43
014D:  CALL   0D7
.................... 			output_bit(outEn, 1); 
014E:  BSF    05.7
.................... 			break; 
014F:  GOTO   1E7
....................  
.................... 	case 3:	output_bit(clk,0); 
0150:  BCF    06.0
.................... 			output_bit(clk,1);	 
0151:  BSF    06.0
.................... 			output_bus(dsp3,DP3); 
0152:  MOVLW  00
0153:  BTFSC  2F.2
0154:  MOVLW  01
0155:  MOVWF  41
0156:  MOVF   2C,W
0157:  MOVWF  42
0158:  MOVF   41,W
0159:  MOVWF  43
015A:  CALL   0D7
.................... 			output_bit(outEn, 1); 
015B:  BSF    05.7
.................... 			break; 
015C:  GOTO   1E7
....................  
.................... 	case 4:	output_bit(clk,0); 
015D:  BCF    06.0
.................... 			output_bit(clk,1); 
015E:  BSF    06.0
.................... 			output_bus(dsp4,DP4); 
015F:  MOVLW  00
0160:  BTFSC  2F.3
0161:  MOVLW  01
0162:  MOVWF  41
0163:  MOVF   2D,W
0164:  MOVWF  42
0165:  MOVF   41,W
0166:  MOVWF  43
0167:  CALL   0D7
.................... 			output_bit(outEn, 1); 
0168:  BSF    05.7
.................... 			break;	 
0169:  GOTO   1E7
....................  
.................... 	case 5: set_tris_a(0b01001111); 
016A:  MOVLW  4F
016B:  TRIS   5
.................... 		    set_tris_b(0b00110000); 
016C:  MOVLW  30
016D:  TRIS   6
.................... 			temp2 = 0x00; 
016E:  CLRF   40
.................... 			temp1 = input_b(); 
016F:  MOVF   06,W
0170:  MOVWF  3F
.................... 			if(!bit_test(temp1,sw4)) bit_set(temp2,sw4b); 
0171:  BTFSS  3F.4
0172:  BSF    40.2
.................... 			if(!bit_test(temp1,sw5)) bit_set(temp2,sw5b); 
0173:  BTFSS  3F.5
0174:  BSF    40.3
.................... 			temp1 = input_a(); 
0175:  MOVF   05,W
0176:  MOVWF  3F
.................... 			if(!bit_test(temp1,sw1)) bit_set(temp2,sw1b); 
0177:  BTFSS  3F.1
0178:  BSF    40.0
.................... 			if(!bit_test(temp1,sw3)) bit_set(temp2,sw3b); 
0179:  BTFSS  3F.3
017A:  BSF    40.1
.................... 			inFlag = filtro(temp2); 
017B:  MOVF   40,W
017C:  MOVWF  41
*
01E1:  MOVF   78,W
01E2:  MOVWF  31
.................... 			soCont = -1; 
01E3:  MOVLW  FF
01E4:  MOVWF  2E
.................... 			break;			 
01E5:  GOTO   1E7
....................  
.................... 	default: break; 
01E6:  GOTO   1E7
....................  
.................... 	}//switch 
.................... 	set_timer0(100);		 
01E7:  MOVLW  64
01E8:  MOVWF  01
....................  
.................... } 
01E9:  GOTO   2FE (RETURN)
....................  
.................... /***************************************** 
.................... /*Função output_bus(int8 bus)  
.................... /* Exterioriza valor lógico da dado do display e leds 
.................... /****************************************/ 
.................... void output_bus(int8 bus,boolean DPst){ 
.................... 	output_bit(bus0,bit_test(bus,0)); 
*
00D7:  BTFSC  42.0
00D8:  GOTO   0DB
00D9:  BCF    05.0
00DA:  GOTO   0DC
00DB:  BSF    05.0
.................... 	output_bit(bus1,bit_test(bus,1)); 
00DC:  BTFSC  42.1
00DD:  GOTO   0E0
00DE:  BCF    05.1
00DF:  GOTO   0E1
00E0:  BSF    05.1
.................... 	output_bit(bus2,bit_test(bus,2)); 
00E1:  BTFSC  42.2
00E2:  GOTO   0E5
00E3:  BCF    05.2
00E4:  GOTO   0E6
00E5:  BSF    05.2
.................... 	output_bit(bus3,bit_test(bus,3)); 
00E6:  BTFSC  42.3
00E7:  GOTO   0EA
00E8:  BCF    05.3
00E9:  GOTO   0EB
00EA:  BSF    05.3
.................... 	output_bit(bus4,bit_test(bus,4)); 
00EB:  BTFSC  42.4
00EC:  GOTO   0EF
00ED:  BCF    06.4
00EE:  GOTO   0F0
00EF:  BSF    06.4
.................... 	output_bit(bus5,bit_test(bus,5)); 
00F0:  BTFSC  42.5
00F1:  GOTO   0F4
00F2:  BCF    06.5
00F3:  GOTO   0F5
00F4:  BSF    06.5
.................... 	output_bit(bus6,bit_test(bus,6)); 
00F5:  BTFSC  42.6
00F6:  GOTO   0F9
00F7:  BCF    05.6
00F8:  GOTO   0FA
00F9:  BSF    05.6
.................... 	output_bit(bus7,bit_test(bus,7)); 
00FA:  BTFSC  42.7
00FB:  GOTO   0FE
00FC:  BCF    06.7
00FD:  GOTO   0FF
00FE:  BSF    06.7
.................... 	//output_bit(bus7,DPst);			//pino do digital point 
....................  
.................... } 
00FF:  RETLW  00
.................... /***************************************** 
.................... /*Função filtro (int flag)  
.................... /* Debouce das teclas 
.................... /****************************************/ 
.................... int	filtro (int flag){ 
.................... 		int p; 
.................... 		int ret = 0; 
*
017D:  CLRF   43
.................... 		for (p=0;p<4;p++){ 
017E:  CLRF   42
017F:  MOVF   42,W
0180:  SUBLW  03
0181:  BTFSS  03.0
0182:  GOTO   1DE
.................... 			if (bit_test(flag,p)) 
0183:  MOVF   41,W
0184:  MOVWF  77
0185:  MOVF   42,W
0186:  MOVWF  78
0187:  BTFSC  03.2
0188:  GOTO   18D
0189:  BCF    03.0
018A:  RRF    77,F
018B:  DECFSZ 78,F
018C:  GOTO   189
018D:  BTFSS  77.0
018E:  GOTO   1BF
.................... 			{	if(!bit_test(status,p)) 
018F:  MOVF   36,W
0190:  MOVWF  77
0191:  MOVF   42,W
0192:  MOVWF  78
0193:  BTFSC  03.2
0194:  GOTO   199
0195:  BCF    03.0
0196:  RRF    77,F
0197:  DECFSZ 78,F
0198:  GOTO   195
0199:  BTFSC  77.0
019A:  GOTO   1BE
.................... 				{	fCont[p]++; 
019B:  MOVLW  32
019C:  ADDWF  42,W
019D:  MOVWF  04
019E:  INCF   00,F
.................... 		   			if (fCont[p] > 5){ 
019F:  MOVLW  32
01A0:  ADDWF  42,W
01A1:  MOVWF  04
01A2:  MOVF   00,W
01A3:  SUBLW  05
01A4:  BTFSC  03.0
01A5:  GOTO   1BE
.................... 						bit_set(status,p); 
01A6:  MOVLW  01
01A7:  MOVWF  77
01A8:  MOVF   42,W
01A9:  MOVWF  78
01AA:  BTFSC  03.2
01AB:  GOTO   1B0
01AC:  BCF    03.0
01AD:  RLF    77,F
01AE:  DECFSZ 78,F
01AF:  GOTO   1AC
01B0:  MOVF   77,W
01B1:  IORWF  36,F
.................... 						bit_set(ret,p); 
01B2:  MOVLW  01
01B3:  MOVWF  77
01B4:  MOVF   42,W
01B5:  MOVWF  78
01B6:  BTFSC  03.2
01B7:  GOTO   1BC
01B8:  BCF    03.0
01B9:  RLF    77,F
01BA:  DECFSZ 78,F
01BB:  GOTO   1B8
01BC:  MOVF   77,W
01BD:  IORWF  43,F
.................... 					}//if 
.................... 				}//if 
.................... 			} 
.................... 			else 
01BE:  GOTO   1DC
.................... 			{	fCont[p] = 0; 
01BF:  MOVLW  32
01C0:  ADDWF  42,W
01C1:  MOVWF  04
01C2:  CLRF   00
.................... 				if(!bit_test(inFlag,p)) 
01C3:  MOVF   31,W
01C4:  MOVWF  77
01C5:  MOVF   42,W
01C6:  MOVWF  78
01C7:  BTFSC  03.2
01C8:  GOTO   1CD
01C9:  BCF    03.0
01CA:  RRF    77,F
01CB:  DECFSZ 78,F
01CC:  GOTO   1C9
01CD:  BTFSC  77.0
01CE:  GOTO   1DC
.................... 					bit_clear(status,p); 
01CF:  MOVLW  01
01D0:  MOVWF  77
01D1:  MOVF   42,W
01D2:  MOVWF  78
01D3:  BTFSC  03.2
01D4:  GOTO   1D9
01D5:  BCF    03.0
01D6:  RLF    77,F
01D7:  DECFSZ 78,F
01D8:  GOTO   1D5
01D9:  MOVF   77,W
01DA:  XORLW  FF
01DB:  ANDWF  36,F
.................... 			}//else 
....................  
....................  
.................... 		}//for 
01DC:  INCF   42,F
01DD:  GOTO   17F
....................  
.................... 	return (ret|inFlag); 
01DE:  MOVF   43,W
01DF:  IORWF  31,W
01E0:  MOVWF  78
.................... }//função 
....................  
....................  
....................  
....................  
....................  

Configuration Fuses:
   Word  1: 3F18   NOWDT NOPUT NOPROTECT NOBROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
